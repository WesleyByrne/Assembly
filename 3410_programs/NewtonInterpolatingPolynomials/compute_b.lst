Microsoft (R) Macro Assembler Version 6.15.8803		    10/31/18 10:50:13
compute_b.asm						     Page 1 - 1


				.386
				.MODEL FLAT

				PUBLIC	compute_b

				;there's a fld1 for 1.0, and fldz for 0.0
 = [ebp + 16]			array_addr EQU [ebp + 16] 
 = [ebp+12]			n EQU [ebp+12]
 = [ebp+8]			m EQU [ebp+8]
 = [ebp - 4]			tmp_float EQU [ebp - 4] 
 = [ebp - 8]			a_val EQU [ebp - 8]
 = [ebp - 12]			b_val EQU [ebp - 12]

				retr789 MACRO index 
				        xor eax, eax
				        mov ebx, index
				        mov eax, 8
				        imul ebx
				        mov edi, eax
				        mov ebx, array_addr
				        ENDM

				retrieve_x MACRO index ;store in eax
				        retr789 index
				        mov eax, [ebx+edi] 
				        ENDM

				retrieve_y MACRO index 
				        retr789 index
				        mov eax, [ebx+edi+4] 
				        ENDM

				call_computeb MACRO n_, m_
				        push array_addr
				        push n_ 
				        push m_ 
				        call compute_b 
				ENDM
 00000000			.CODE

 00000000			compute_b 	PROC 	Near32

 00000000			setup:
 00000000  55			        push	ebp
 00000001  8B EC			mov	ebp, esp	 ; establish stack frame (ebp contains a memory address)
				                        
 00000003  6A 00		        pushd   0                
 00000005  6A 00		        pushd   0                
 00000007  6A 00		        pushd   0                ; add space on the stack for local variables

 00000009  53				push    ebx		 ; save the registers used below (can't save them all as ax contains the index of the match)
 0000000A  51			        push    ecx
 0000000B  52			        push    edx
 0000000C  66| 9C			pushf 			 ; save all flags
				                       
 0000000E  66| B9 0000		        mov     cx, 0

 00000012			codestuff:
 00000012  33 C0		        xor eax, eax
 00000014  66| 8B 45 08		        mov ax, m
 00000018  66| 3B 45 0C		        cmp ax, n 
 0000001C  74 70		        je f_x 

 0000001E  66| 40		        inc ax

				        call_computeb n, eax
 00000020  FF 75 10	     1	        push array_addr
 00000023  FF 75 0C	     1	        push n 
 00000026  50		     1	        push eax 
 00000027  E8 FFFFFFD4	     1	        call compute_b 
 0000002C  89 45 F8		        mov a_val, eax
				        
 0000002F  33 C0		        xor eax, eax
 00000031  66| 8B 45 0C		        mov ax, n 
 00000035  66| 48		        dec ax

				        call_computeb eax, m
 00000037  FF 75 10	     1	        push array_addr
 0000003A  50		     1	        push eax 
 0000003B  FF 75 08	     1	        push m 
 0000003E  E8 FFFFFFBD	     1	        call compute_b 
 00000043  89 45 F4		        mov b_val, eax

 00000046  D9 45 F8		        fld REAL4 ptr a_val
 00000049  D9 45 F4		        fld REAL4 ptr b_val

 0000004C  DE E9		        fsub

				        retrieve_x n 
 0000004E  33 C0	     2	        xor eax, eax
 00000050  8B 5D 0C	     2	        mov ebx, n
 00000053  B8 00000008	     2	        mov eax, 8
 00000058  F7 EB	     2	        imul ebx
 0000005A  8B F8	     2	        mov edi, eax
 0000005C  8B 5D 10	     2	        mov ebx, array_addr
 0000005F  8B 04 1F	     1	        mov eax, [ebx+edi] 
 00000062  89 45 FC		        mov tmp_float, eax
 00000065  D9 45 FC		        fld REAL4 ptr tmp_float

				        retrieve_x m
 00000068  33 C0	     2	        xor eax, eax
 0000006A  8B 5D 08	     2	        mov ebx, m
 0000006D  B8 00000008	     2	        mov eax, 8
 00000072  F7 EB	     2	        imul ebx
 00000074  8B F8	     2	        mov edi, eax
 00000076  8B 5D 10	     2	        mov ebx, array_addr
 00000079  8B 04 1F	     1	        mov eax, [ebx+edi] 
 0000007C  89 45 FC		        mov tmp_float, eax
 0000007F  D9 45 FC		        fld REAL4 ptr tmp_float


 00000082  DE E9		        fsub
 00000084  DE F9		        fdiv 

 00000086  D9 5D FC		        fstp REAL4 PTR tmp_float
 00000089  8B 45 FC		        mov eax, tmp_float
				        
 0000008C  EB 15		        jmp finish
 0000008E			f_x:
				        ;retrieve array's coordinate y value and return it 
				        retrieve_y n
 0000008E  33 C0	     2	        xor eax, eax
 00000090  8B 5D 0C	     2	        mov ebx, n
 00000093  B8 00000008	     2	        mov eax, 8
 00000098  F7 EB	     2	        imul ebx
 0000009A  8B F8	     2	        mov edi, eax
 0000009C  8B 5D 10	     2	        mov ebx, array_addr
 0000009F  8B 44 1F 04	     1	        mov eax, [ebx+edi+4] 
				        
 000000A3			finish:

				        ; of course, pop the items in the reverse order from push
 000000A3  66| 9D			popf			; restore flags and registers
 000000A5  5A			        pop	edx
 000000A6  59			        pop     ecx
 000000A7  5B				pop	ebx

 000000A8  8B E5		        mov     esp,ebp		; discard local variables

 000000AA  5D				pop	ebp
 000000AB  C2 000C			ret	12		; return, discarding parameter

 000000AE			compute_b	ENDP

				END

Microsoft (R) Macro Assembler Version 6.15.8803		    10/31/18 10:50:13
compute_b.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

call_computeb  . . . . . . . . .	Proc
retr789  . . . . . . . . . . . .	Proc
retrieve_x . . . . . . . . . . .	Proc
retrieve_y . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000000 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000AE DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

compute_b  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000AE Public
  setup  . . . . . . . . . . . .	L Near	 00000000 _TEXT	
  codestuff  . . . . . . . . . .	L Near	 00000012 _TEXT	
  f_x  . . . . . . . . . . . . .	L Near	 0000008E _TEXT	
  finish . . . . . . . . . . . .	L Near	 000000A3 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
a_val  . . . . . . . . . . . . .	Text   	 [ebp - 8]
array_addr . . . . . . . . . . .	Text   	 [ebp + 16]
b_val  . . . . . . . . . . . . .	Text   	 [ebp - 12]
m  . . . . . . . . . . . . . . .	Text   	 [ebp+8]
n  . . . . . . . . . . . . . . .	Text   	 [ebp+12]
tmp_float  . . . . . . . . . . .	Text   	 [ebp - 4]

	   0 Warnings
	   0 Errors
